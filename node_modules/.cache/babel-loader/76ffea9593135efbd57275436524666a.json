{"ast":null,"code":"import _slicedToArray from \"/home/bruno/threeJs/threejs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bruno/threeJs/threejs/src/components/Cubes/Cube.js\";\nimport React, { useMemo, useRef, useState, useEffect, useCallback } from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\nexport default (() => {\n  const mesh = useRef();\n  const time = useRef(0);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isHovered = _useState2[0],\n        setIsHovered = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isActive = _useState4[0],\n        setIsActive = _useState4[1];\n\n  const isActiveRef = useRef(isActive); // position\n\n  const position = useMemo(() => {\n    return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n  }, []); // random time mod factor\n\n  const timeMod = useMemo(() => random(0.1, 4, true), []); // color\n\n  const color = isHovered ? 0xe5d54d : isActive ? 0xf7e7e5 : 0xf95b3c; //useEffect of the activeState\n\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]); // raf loop\n\n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\n    }\n  }); // Events\n\n  const onHover = useCallback((e, value) => {\n    e.stopPropagation();\n    setIsHovered(value);\n  }, [setIsHovered]);\n\n  const _onClick = useCallback(e => {\n    e.stopPropagation();\n    setIsActive(v => !v);\n  }, [setIsActive]);\n\n  return /*#__PURE__*/React.createElement(\"mesh\", {\n    ref: mesh,\n    position: position,\n    onClick: e => _onClick(e),\n    onPointerOver: e => onHover(e, true),\n    onPointerOut: e => onHover(e, false),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"circleBufferGeometry\", {\n    attach: \"geometry\",\n    args: [0.2, 0.2, 0.2, 0.2],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"meshStandardMaterial\", {\n    attach: \"material\",\n    color: color,\n    roughness: 0.6,\n    metalness: 0.1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["/home/bruno/threeJs/threejs/src/components/Cubes/Cube.js"],"names":["React","useMemo","useRef","useState","useEffect","useCallback","random","useFrame","mesh","time","isHovered","setIsHovered","isActive","setIsActive","isActiveRef","position","timeMod","color","current","rotation","y","Math","sin","onHover","e","value","stopPropagation","onClick","v"],"mappings":"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","sourcesContent":["import React, {\n  useMemo,\n  useRef,\n  useState,\n  useEffect,\n  useCallback\n} from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport default () => {\n  const mesh = useRef();\n  const time = useRef(0);\n\n  const [isHovered, setIsHovered] = useState(false);\n  const [isActive, setIsActive] = useState(false);\n\n  const isActiveRef = useRef(isActive);\n\n  // position\n  const position = useMemo(() => {\n    return [random(-3, 3, true), random(-3, 3, true), random(-3, 3, true)];\n  }, []);\n\n  // random time mod factor\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  // color\n  const color = isHovered ? 0xe5d54d : (isActive ? 0xf7e7e5 : 0xf95b3c);\n\n  //useEffect of the activeState\n  useEffect(() => {\n    isActiveRef.current = isActive;\n  }, [isActive]);\n\n  // raf loop\n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.y = position[1] + Math.sin(time.current) * 0.4;\n    }\n  });\n\n  // Events\n  const onHover = useCallback(\n    (e, value) => {\n      e.stopPropagation();\n      setIsHovered(value);\n    },\n    [setIsHovered]\n  );\n\n  const onClick = useCallback(\n    e => {\n      e.stopPropagation();\n      setIsActive(v => !v);\n    },\n    [setIsActive]\n  );\n\n  return (\n    <mesh\n      ref={mesh}\n      position={position}\n      onClick={e => onClick(e)}\n      onPointerOver={e => onHover(e, true)}\n      onPointerOut={e => onHover(e, false)}\n    >\n      {/* <boxBufferGeometry attach=\"geometry\" args={[0.2, 0.2, 0.2]} /> */}\n      <circleBufferGeometry attach=\"geometry\" args={[ 0.2, 0.2, 0.2, 0.2]} />\n      <meshStandardMaterial\n        attach=\"material\"\n        color={color}\n        roughness={0.6}\n        metalness={0.1}\n      />\n    </mesh>\n  );\n};"]},"metadata":{},"sourceType":"module"}