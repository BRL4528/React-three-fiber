{"ast":null,"code":"import _slicedToArray from \"/home/bruno/threeJs/threejs/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/home/bruno/threeJs/threejs/src/components/Lights/index.js\";\nimport React, { useMemo, useRef, useState } from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\nexport default (() => {\n  const mesh = useRef();\n  const time = useRef(0);\n\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isActive = _useState2[0],\n        setIsActive = _useState2[1];\n\n  const isActiveRef = useRef(isActive);\n  const position = useMemo(() => {\n    return [0, 0.2, 0];\n  }, []);\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  const FakeSphere = () => {\n    return /*#__PURE__*/React.createElement(\"mesh\", {\n      position: position,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"sphereBufferGeometry\", {\n      args: [0.7, 30, 30],\n      attach: \"geometry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n      color: 0xfff1ef,\n      attach: \"material\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  const FakeSphere2 = () => {\n    return /*#__PURE__*/React.createElement(\"mesh\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"coneBufferGeometry\", {\n      args: [0.9, 2, 10],\n      attach: \"geometry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n      color: \"red\",\n      attach: \"material\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.z = position[1] + Math.sin(time.current) * 0.4;\n    }\n  });\n\n  const PartedeCima = () => {\n    return /*#__PURE__*/React.createElement(\"mesh\", {\n      ref: mesh,\n      position: position,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"boxBufferGeometry\", {\n      args: [6, 0.4, 2],\n      attach: \"geometry\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }\n    }), /*#__PURE__*/React.createElement(\"meshBasicMaterial\", {\n      color: 0xfff1ef,\n      attach: \"material\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }\n    }));\n  };\n\n  return /*#__PURE__*/React.createElement(\"group\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(FakeSphere2, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PartedeCima, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"ambientLight\", {\n    intensity: 0.1,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"pointLight\", {\n    intensity: 1.12,\n    position: [0, 0, 0],\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }));\n});","map":{"version":3,"sources":["/home/bruno/threeJs/threejs/src/components/Lights/index.js"],"names":["React","useMemo","useRef","useState","random","useFrame","mesh","time","isActive","setIsActive","isActiveRef","position","timeMod","FakeSphere","FakeSphere2","current","rotation","y","z","Math","sin","PartedeCima"],"mappings":"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","sourcesContent":["import React, { useMemo, useRef, useState } from \"react\";\nimport { random } from \"lodash\";\nimport { useFrame } from \"react-three-fiber\";\n\nexport default () => {\n  const mesh = useRef();                                  \n  const time = useRef(0);\n\n  const [isActive, setIsActive] = useState(false);\n\n  const isActiveRef = useRef(isActive);\n\n  const position = useMemo(() => {\n    return [0, 0.2, 0];\n  }, []);                             \n\n  const timeMod = useMemo(() => random(0.1, 4, true), []);\n\n  const FakeSphere = () => {\n    return (\n      <mesh\n      position={position}\n      >       \n        <sphereBufferGeometry args={[0.7, 30, 30]} attach=\"geometry\" />\n        <meshBasicMaterial color={0xfff1ef} attach=\"material\" />\n\n      </mesh>\n    );\n  };\n  const FakeSphere2 = () => {\n    return (\n      <mesh>      \n        <coneBufferGeometry args={[0.9, 2, 10]} attach=\"geometry\" />\n        <meshBasicMaterial color=\"red\" attach=\"material\" />\n\n      </mesh>\n    );\n  };\n  \n  useFrame(() => {\n    mesh.current.rotation.y += 0.01 * timeMod;\n    if (isActiveRef.current) {\n      time.current += 0.03;\n      mesh.current.position.z = position[1] + Math.sin(time.current) * 0.4;\n    }\n  });\n \n  const PartedeCima = () => {\n    return (\n      <mesh ref={mesh} position={position} >       \n        <boxBufferGeometry args={[6, 0.4, 2]} attach=\"geometry\" />\n        <meshBasicMaterial color={0xfff1ef} attach=\"material\" />\n\n      </mesh>\n    );\n  };\n\n\n  return (\n    <group>\n      {/* <FakeSphere /> */}\n      <FakeSphere2 />\n     \n      <PartedeCima />\n      <ambientLight intensity={0.1} />\n      <pointLight intensity={1.12} position={[0, 0, 0]} />\n    </group>\n  );\n};\n"]},"metadata":{},"sourceType":"module"}